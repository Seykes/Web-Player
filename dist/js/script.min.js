"use strict";

var dropZone = document.q;
uerySelector("div"), input = document.querySelector("input"), file, text, progress, volume, audio, frequencyArray, dropZone.ondrop = function (e) {
  e.preventDefault(), "file" == e.dataTransfer.items[0].kind && (file = e.dataTransfer.items[0].getAsFile(), playTrack(file));
}, dropZone.ondragover = function (e) {
  e.preventDefault();
}, dropZone.onclick = function () {
  input.click(), input.onchange = function () {
    file = input.files[0], playTrack(file);
  };
};
var radius,
    piece,
    x,
    y,
    xEnd,
    yEnd,
    barHeight,
    lineColor,
    C = document.querySelector("canvas"),
    $ = C.getContext("2d"),
    W = C.width = innerWidth,
    H = C.height = innerHeight,
    centerX = W / 2,
    centerY = H / 2,
    bars = 200,
    barWidth = 2;

function playTrack(e) {
  function r(e, r, t, n, a, o) {
    lineColor = "rgb(" + o + ", " + o + ", 205)", $.strokeStyle = lineColor, $.lineWidth = a, $.beginPath(), $.moveTo(e, r), $.lineTo(t, n), $.stroke();
  }

  dropZone.style.display = "none", text = document.querySelector("p"), text.style.transform = "translate(-50%,-50%)", text.innerHTML = 'progress: <span class="progress"></span> <br> volume: <span class="volume"></span>', volume = document.querySelector(".volume"), progress = document.querySelector(".progress"), document.addEventListener("keydown", function (e) {
    try {
      32 == e.keyCode ? audio.paused ? audio.play() : audio.pause() : 13 == e.keyCode ? audio.load() : 39 == e.keyCode ? audio.currentTime += 10 : 37 == e.keyCode ? audio.currentTime -= 10 : 40 == e.keyCode ? audio.volume -= .1 : 38 == e.keyCode && (audio.volume += .1);
    } catch (_unused) {
      return;
    }
  }), console.log("Use Keyboard: \n Space to Play/Pause \n Enter to Stop \n Arrows to Change \n Time and Volume"), audio = new Audio(), context = new AudioContext(), analyser = context.createAnalyser(), audio.src = URL.createObjectURL(e), source = context.createMediaElementSource(audio), source.connect(analyser), analyser.connect(context.destination), frequencyArray = new Uint8Array(analyser.frequencyBinCount), audio.play(), audio.loop = !0, function e() {
    C.style.display = "block", piece = audio.currentTime / audio.duration, radius = 105, $.clearRect(0, 0, W, H), $.beginPath(), $.arc(centerX, centerY, radius, 0, Math.PI * (2 * piece)), $.lineWidth = 30, $.stroke(), volume.innerText = Math.trunc(100 * audio.volume) + "%", progress.innerText = Math.trunc(100 * piece) + "%", analyser.getByteFrequencyData(frequencyArray);

    for (var _e = 0; _e < bars; _e++) {
      radius = 120, rads = 2 * Math.PI / bars, barHeight = .6 * frequencyArray[_e], x = centerX + Math.cos(rads * _e) * radius, y = centerY + Math.sin(rads * _e) * radius, xEnd = centerX + Math.cos(rads * _e) * (radius + barHeight), yEnd = centerY + Math.sin(rads * _e) * (radius + barHeight), r(x, y, xEnd, yEnd, barWidth, frequencyArray[_e]);
    }

    requestAnimationFrame(e);
  }();
}